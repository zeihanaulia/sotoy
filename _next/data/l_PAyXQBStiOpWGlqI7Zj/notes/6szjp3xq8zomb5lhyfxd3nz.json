{"pageProps":{"note":{"id":"6szjp3xq8zomb5lhyfxd3nz","title":"RLS Supabase: Biar Data Lo Gak Jadi Konsumsi Publik","desc":"","updated":1748257326562,"created":1748257270940,"custom":{},"fname":"til.supabase.rls","type":"note","vault":{"fsPath":"vault"},"contentHash":"e2492d877d4f79699c422395bfd788ce","links":[],"anchors":{"apa-itu-rls":{"type":"header","text":"Apa Itu RLS?","value":"apa-itu-rls","line":11,"column":0,"depth":2},"kenapa-penting":{"type":"header","text":"Kenapa Penting?","value":"kenapa-penting","line":16,"column":0,"depth":3},"cara-kerja-rls":{"type":"header","text":"Cara Kerja RLS","value":"cara-kerja-rls","line":24,"column":0,"depth":2},"contoh-use-case":{"type":"header","text":"Contoh Use Case","value":"contoh-use-case","line":43,"column":0,"depth":2},"simulasi-sederhana":{"type":"header","text":"Simulasi Sederhana","value":"simulasi-sederhana","line":50,"column":0,"depth":3},"custom-claims-di-supabase":{"type":"header","text":"Custom Claims di Supabase","value":"custom-claims-di-supabase","line":79,"column":0,"depth":3},"best-practice":{"type":"header","text":"Best Practice","value":"best-practice","line":130,"column":0,"depth":2},"reference":{"type":"header","text":"Reference","value":"reference","line":139,"column":0,"depth":2}},"children":[],"parent":"9x4m9ahwr0uiue1msm9kpw2","data":{}},"body":"<h1 id=\"rls-supabase-biar-data-lo-gak-jadi-konsumsi-publik\">RLS Supabase: Biar Data Lo Gak Jadi Konsumsi Publik<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rls-supabase-biar-data-lo-gak-jadi-konsumsi-publik\"></a></h1>\n<p>Lo pasti pernah kepikiran: “Gimana caranya user cuma bisa ngakses data yang emang buat dia?” Nah, RLS atau Row-Level Security itu jawabannya. Di Supabase (dan di Postgres juga), RLS itu semacam <strong>penjaga pintu</strong>—dia bakal nentuin data mana yang boleh dan nggak boleh diakses sama user tertentu.</p>\n<h2 id=\"apa-itu-rls\"><strong>Apa Itu RLS?</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#apa-itu-rls\"></a></h2>\n<p>Secara teknis, RLS itu fitur bawaan Postgres yang bikin lo bisa filter data langsung di level baris (row), bukan cuma kolom doang. Jadi, kalau lo punya tabel <strong>orders</strong> isinya 1 juta baris, user A cuma boleh liat order yang dia bikin doang—nggak bisa kepoin order orang lain. Semua logicnya ditulis di database, bukan di backend lo.</p>\n<p>Gampangnya, <strong>RLS</strong> adalah fitur keren di Postgres yang bikin lo bisa atur siapa yang bisa lihat data di level baris (row). Jadi, bukan cuma tabel yang di-protect, tapi per <strong>baris</strong> data pun bisa lo atur aksesnya. RLS ini kayak satpam di pintu-pintu rumah lo – lo bisa atur siapa yang boleh lewat, siapa yang nggak.</p>\n<h3 id=\"kenapa-penting\"><strong>Kenapa Penting?</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#kenapa-penting\"></a></h3>\n<p>Tanpa RLS, lo harus rely sama backend lo buat handle data filtering. Itu riskan banget. Misalnya, di backend lo lupa check <code>where user_id = session_user</code>, user bisa dapetin data orang lain—bahaya! Dengan RLS, lo <strong>mindahin logic proteksi</strong> langsung ke database. Hasilnya:</p>\n<ul>\n<li>Data lebih aman.</li>\n<li>Backend lo lebih simpel (nggak perlu query filter yang ribet).</li>\n<li>Semua permintaan ke database (termasuk API Supabase) udah auto-filtered.</li>\n</ul>\n<p>Lo bayangin kalo lo punya satu database tapi dipake rame-rame: ada admin, user biasa, dan customer premium. Tanpa RLS, kalo lo nggak hati-hati, siapa aja bisa lihat semua data. Bahaya, kan? Nah, RLS bikin lo bisa setel “aturan main” biar user A cuma liat data dia doang, admin bisa liat semua, dan lain-lain.</p>\n<h2 id=\"cara-kerja-rls\">Cara Kerja RLS<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#cara-kerja-rls\"></a></h2>\n<p>Secara default, Postgres <strong>nggak aktifin</strong> RLS. Lo harus nyalain dulu:</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> profiles <span class=\"token keyword\">enable</span> <span class=\"token keyword\">row</span> <span class=\"token keyword\">level</span> security<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Abis itu, lo bikin policy. Misalnya, lo pengen user biasa cuma bisa liat datanya sendiri:</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> policy <span class=\"token string\">\"user can view own profile\"</span>\n<span class=\"token keyword\">on</span> profiles\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">select</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>auth<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Nah, <code>auth.uid()</code> ini di Supabase otomatis dapet dari JWT user yang login. Jadi lo nggak perlu nulis kode filter data di backend lo, semua udah dihandle sama database!</p>\n<h2 id=\"contoh-use-case\"><strong>Contoh Use Case</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#contoh-use-case\"></a></h2>\n<p>Lo punya app SaaS buat beberapa tenant. Di sana ada admin yang harus bisa liat semua data, dan ada user biasa yang cuma boleh liat data organisasinya doang. Contohnya di tabel <code>profiles</code>:</p>\n<ul>\n<li>User Biasa: cuma boleh liat data user di tenant dia sendiri.</li>\n<li>Admin: boleh liat data semua orang.</li>\n<li>Guest / Anon: nggak boleh liat sama sekali.</li>\n</ul>\n<h3 id=\"simulasi-sederhana\"><strong>Simulasi Sederhana</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#simulasi-sederhana\"></a></h3>\n<p>Di Supabase, lo bisa bikin 2 policy di tabel <code>profiles</code> kayak gini:</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Admin bisa akses semua</span>\n<span class=\"token keyword\">create</span> policy <span class=\"token string\">\"admin can access all profiles\"</span>\n<span class=\"token keyword\">on</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">.</span>profiles\n<span class=\"token keyword\">as</span> permissive\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">all</span>\n<span class=\"token keyword\">to</span> authenticated\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>\n  auth<span class=\"token punctuation\">.</span>jwt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">>></span> <span class=\"token string\">'role'</span> <span class=\"token operator\">=</span> <span class=\"token string\">'admin'</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- User biasa cuma bisa akses profil sendiri</span>\n<span class=\"token keyword\">create</span> policy <span class=\"token string\">\"user can access own profile\"</span>\n<span class=\"token keyword\">on</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">.</span>profiles\n<span class=\"token keyword\">as</span> permissive\n<span class=\"token keyword\">for</span> <span class=\"token keyword\">select</span>\n<span class=\"token keyword\">to</span> authenticated\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>auth<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Jadi waktu ada request:</p>\n<ul>\n<li>Admin dapet full akses.</li>\n<li>User biasa cuma liat data yang ID-nya sama dengan <code>auth.uid()</code>.</li>\n<li>Kalau anon? Kena RLS—data nggak muncul sama sekali.</li>\n</ul>\n<h3 id=\"custom-claims-di-supabase\"><strong>Custom Claims di Supabase</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#custom-claims-di-supabase\"></a></h3>\n<p>Supabase support banget buat custom JWT claims—artinya lo bisa nyelipin info tambahan kayak <code>role</code>, <code>tenant_id</code>, atau apapun yang lo butuhin di JWT user. Nah, kenapa ini penting?</p>\n<p>Biasanya, JWT default dari Supabase cuma punya info standar kayak <code>sub</code> (user id), <code>email</code>, sama <code>role</code> yang default (<code>authenticated</code> / <code>anon</code>). Tapi buat app multi-tenant, lo butuh role yang lebih spesifik—misalnya admin, sales, customer, dsb.</p>\n<p>Di Supabase, caranya lewat <strong>Auth Hooks</strong>. Lo bisa bikin <strong>custom access token hook</strong> di PostgreSQL yang akan “selipin” field baru ke JWT sebelum dikasih ke user. Contoh:</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token operator\">or</span> <span class=\"token keyword\">replace</span> <span class=\"token keyword\">function</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">.</span>custom_access_token_hook<span class=\"token punctuation\">(</span>event jsonb<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">returns</span> jsonb\n<span class=\"token keyword\">language</span> plpgsql\n<span class=\"token keyword\">as</span> $$\n<span class=\"token keyword\">declare</span>\n  claims jsonb<span class=\"token punctuation\">;</span>\n  user_role <span class=\"token keyword\">text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">begin</span>\n  <span class=\"token comment\">-- Ambil role dari tabel profiles</span>\n  <span class=\"token keyword\">select</span> role <span class=\"token keyword\">into</span> user_role\n  <span class=\"token keyword\">from</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">.</span>profiles\n  <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token operator\">-</span><span class=\"token operator\">>></span><span class=\"token string\">'sub'</span><span class=\"token punctuation\">)</span>::uuid<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">-- Kalo nggak ketemu, fallback ke 'user'</span>\n  <span class=\"token keyword\">if</span> user_role <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">then</span>\n    user_role :<span class=\"token operator\">=</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">end</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">-- Ambil claims dari event</span>\n  claims :<span class=\"token operator\">=</span> <span class=\"token keyword\">coalesce</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token string\">'claims'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'{}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">-- Tambahin custom claim 'role'</span>\n  claims :<span class=\"token operator\">=</span> jsonb_set<span class=\"token punctuation\">(</span>claims<span class=\"token punctuation\">,</span> <span class=\"token string\">'{app_metadata, role}'</span><span class=\"token punctuation\">,</span> to_jsonb<span class=\"token punctuation\">(</span>user_role<span class=\"token punctuation\">)</span>::jsonb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">-- Update claims di event</span>\n  event :<span class=\"token operator\">=</span> jsonb_set<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token string\">'{claims}'</span><span class=\"token punctuation\">,</span> claims<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> event<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">end</span><span class=\"token punctuation\">;</span>\n$$<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Hasilnya? JWT user lo sekarang bakal punya <code>app_metadata.role</code> = “admin” atau “user”, sesuai yang lo simpen di tabel <code>profiles</code>. Ini yang nanti <strong>dipake di policy RLS</strong>!</p>\n<p><strong>Tips</strong>\n✅ <strong>Jangan asal nambahin claims</strong>—cuma yang emang dibutuhin buat RLS.\n✅ <strong>Tes hook lo</strong>—biar JWT yang dihasilkan sesuai ekspektasi dan nggak ngerusak policy yang udah lo bikin.\n✅ <strong>Hindari leak data sensitif</strong>—jangan selipin info yang nggak perlu di JWT.</p>\n<hr>\n<h2 id=\"best-practice\"><strong>Best Practice</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#best-practice\"></a></h2>\n<p>Jangan cuma bikin policy yang kelihatannya aman. Ada beberapa tips biar lo nggak keteteran:</p>\n<ol>\n<li><strong>Selalu tes policy lo</strong>—pakai akun dummy yang role-nya beda-beda.</li>\n<li><strong>Pisahin policy buat read (select) sama write (insert/update/delete)</strong>—biar lo bisa detailin kontrolnya.</li>\n<li><strong>Gunakan claim JWT</strong> kayak <code>role</code> atau <code>tenant_id</code> buat filter lebih spesifik—jadi bukan cuma ID user doang.</li>\n<li><strong>Jangan kasih grant <code>select</code> atau <code>all</code> langsung ke <code>anon</code> / <code>authenticated</code></strong> tanpa policy. Tanpa policy, data lo kebuka semua.</li>\n<li><strong>Kalau ada query yang harus admin-only, kasih policy spesifik</strong>—jangan sampe admin lo kena limit yang sama kayak user biasa.</li>\n</ol>\n<h2 id=\"reference\">Reference<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reference\"></a></h2>\n<ul>\n<li><a href=\"https://supabase.com/docs/guides/database/postgres/row-level-security\">Row Level Security di Supabase Docs</a></li>\n<li><a href=\"https://www.postgresql.org/docs/current/ddl-rowsecurity.html\">Postgres Official Docs</a>  </li>\n<li><a href=\"https://supabase.com/docs/guides/auth/auth-hooks/custom-access-token-hook\">Supabase Auth Hooks: Custom Access Token Hook</a></li>\n</ul>","noteIndex":{"id":"oqxmejlafk9x8rj9t5hya5z","title":"Hello and Welcome! 👋","desc":"","updated":1742030256619,"created":1646842475821,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"f7db9d96297496e598d70248ef16b81f","links":[],"anchors":{"find-more":{"type":"header","text":"Find More","value":"find-more","line":20,"column":0,"depth":2}},"children":["spfwom01chbihki1twghclf","bsv930j2j6qlih60c7eu7wh","ohf85tu5nw2b8ewx6cetsmp","u3lhhpriar8wgcjw8svapha","tvdcga33h6hi7fxd9cwqd66"],"parent":null,"data":{},"body":"\nWelcome to the homepage! I use Dendron to store and organize notes, ideas, and experiments I’m working on. Here are the main sections you’ll find on this site:\n\n1. **Learning Notes** — Practical notes on programming, recent technologies, and productivity tips.\n2. **Personal Projects** — Summaries of projects, experiments, and outcomes I’m working on or have completed.\n3. **Writings & Opinions** — Casual articles and reflections about technology, daily life, and other interesting topics.\n\nI’m constantly experimenting and learning. I hope the content here helps you as a reference, a starting point for discussion, or just light reading.\n\n> Why Dendron?\n>\nDendron helps keep notes organized. Its \"seed\" and \"vault\" concepts make it easy to structure content and find what you need.\n\n## Find More\n\nIf you want to learn more or connect, check these links:\n\n- [Homepage (Dendron)](https://zeihanaulia.github.io/sotoy/)\n- [My GitHub](https://github.com/zeihanaulia)\n- [My Twitter / X](https://x.com/zeihanaulia)\n\nThanks for stopping by. If you have feedback or want to chat, feel free to reach out.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"seeds":{"dendron.templates":{}},"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":true,"siteRootDir":"docs","seo":{"title":"Sotoy","description":"Personal knowledge space about anything I learn. Notes, knowledge, and ideas from me.","author":"Zeihan Aulia","twitter":"zeihanaulia","image":{"url":"https://pbs.twimg.com/profile_images/502375255256485888/1UYtt7PT_400x400.jpeg","alt":"Software Engineer, "}},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/sotoy","siteUrl":"https://zeihanaulia.github.io","duplicateNoteBehavior":{"action":"useVault","payload":["vault-private","vault","dendron.templates"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}