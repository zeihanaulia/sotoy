{"pageProps":{"note":{"id":"6w7soczd9kofolyr2tcgsgs","title":"Setup Vm Azure","desc":"","updated":1748956058030,"created":1748955182718,"custom":{},"fname":"til.devops.setup-vm-azure","type":"note","vault":{"fsPath":"vault"},"contentHash":"d5193a3ca940c2903777745125867896","links":[],"anchors":{"1-pendahuluan":{"type":"header","text":"1. Pendahuluan","value":"1-pendahuluan","line":8,"column":0,"depth":2},"2-persiapan-vm":{"type":"header","text":"2. Persiapan VM","value":"2-persiapan-vm","line":28,"column":0,"depth":2},"21-buat-vm-di-azure-langkah-lengkap":{"type":"header","text":"2.1 Buat VM di Azure (Langkah Lengkap)","value":"21-buat-vm-di-azure-langkah-lengkap","line":36,"column":0,"depth":3},"a-akses-portal-azure":{"type":"header","text":"a. Akses Portal Azure","value":"a-akses-portal-azure","line":43,"column":0,"depth":4},"b-mulai-buat-vm":{"type":"header","text":"b. Mulai Buat VM","value":"b-mulai-buat-vm","line":48,"column":0,"depth":4},"c-basic-details":{"type":"header","text":"c. Basic Details","value":"c-basic-details","line":53,"column":0,"depth":4},"d-disk-dan-storage":{"type":"header","text":"d. Disk dan Storage","value":"d-disk-dan-storage","line":71,"column":0,"depth":4},"e-networking":{"type":"header","text":"e. Networking","value":"e-networking","line":76,"column":0,"depth":4},"f-management-monitoring-dan-lainnya":{"type":"header","text":"f. Management, Monitoring, dan lainnya","value":"f-management-monitoring-dan-lainnya","line":82,"column":0,"depth":4},"g-review--create":{"type":"header","text":"g. Review & Create","value":"g-review--create","line":90,"column":0,"depth":4},"h-ssh-ke-vm":{"type":"header","text":"h. SSH ke VM","value":"h-ssh-ke-vm","line":99,"column":0,"depth":4},"i-atur-firewall-buat-port-flowise--redis":{"type":"header","text":"i. Atur Firewall Buat Port Flowise & Redis","value":"i-atur-firewall-buat-port-flowise--redis","line":110,"column":0,"depth":4},"j-sekarang-vm-lu-siap":{"type":"header","text":"j. Sekarang VM lu siap","value":"j-sekarang-vm-lu-siap","line":130,"column":0,"depth":4},"22-akses-vm":{"type":"header","text":"2.2 Akses VM","value":"22-akses-vm","line":139,"column":0,"depth":3},"23-update--install-basic-tools":{"type":"header","text":"2.3 Update & Install Basic Tools","value":"23-update--install-basic-tools","line":153,"column":0,"depth":3},"24-pasang-docker--docker-compose":{"type":"header","text":"2.4 Pasang Docker & Docker Compose","value":"24-pasang-docker--docker-compose","line":169,"column":0,"depth":3},"3-setup-environment-dasar-di-vm":{"type":"header","text":"3. Setup Environment Dasar di VM","value":"3-setup-environment-dasar-di-vm","line":210,"column":0,"depth":3},"4-deploy-flowise--redis-pakai-docker-compose":{"type":"header","text":"4. Deploy Flowise & Redis pakai Docker Compose","value":"4-deploy-flowise--redis-pakai-docker-compose","line":321,"column":0,"depth":3},"5-konfigurasi-environment":{"type":"header","text":"5. Konfigurasi Environment","value":"5-konfigurasi-environment","line":456,"column":0,"depth":3},"a-kenapa-penting":{"type":"header","text":"a. Kenapa Penting?","value":"a-kenapa-penting","line":462,"column":0,"depth":4},"b-bikin-file-env-dasar":{"type":"header","text":"b. Bikin File .env Dasar","value":"b-bikin-file-env-dasar","line":468,"column":0,"depth":4},"c-opsi-setting-bisa-dikosongin--custom":{"type":"header","text":"c. Opsi Setting (Bisa Dikosongin / Custom)","value":"c-opsi-setting-bisa-dikosongin--custom","line":506,"column":0,"depth":4},"d-cek-kembali":{"type":"header","text":"d. Cek Kembali","value":"d-cek-kembali","line":518,"column":0,"depth":4},"e-gunakan-env-di-docker-compose":{"type":"header","text":"e. Gunakan .env di Docker Compose","value":"e-gunakan-env-di-docker-compose","line":528,"column":0,"depth":4},"6-jalankan-flowise-web":{"type":"header","text":"6. Jalankan Flowise Web","value":"6-jalankan-flowise-web","line":540,"column":0,"depth":3},"a-jalankan-docker-compose":{"type":"header","text":"a. Jalankan Docker Compose","value":"a-jalankan-docker-compose","line":546,"column":0,"depth":4},"b-cek-status":{"type":"header","text":"b. Cek Status","value":"b-cek-status","line":561,"column":0,"depth":4},"c-akses-flowise-di-browser":{"type":"header","text":"c. Akses Flowise di Browser","value":"c-akses-flowise-di-browser","line":578,"column":0,"depth":4},"d-apa-yang-dilakuin-flowise":{"type":"header","text":"d. Apa yang Dilakuin Flowise","value":"d-apa-yang-dilakuin-flowise","line":596,"column":0,"depth":4},"e-troubleshooting-singkat":{"type":"header","text":"e. Troubleshooting Singkat","value":"e-troubleshooting-singkat","line":606,"column":0,"depth":4},"7-opsional-setup-worker":{"type":"header","text":"7. (Opsional) Setup Worker","value":"7-opsional-setup-worker","line":623,"column":0,"depth":3},"a-apa-itu-worker":{"type":"header","text":"a. Apa itu Worker?","value":"a-apa-itu-worker","line":635,"column":0,"depth":4},"b-kapan-worker-ini-kepake":{"type":"header","text":"b. Kapan Worker Ini Kepake?","value":"b-kapan-worker-ini-kepake","line":646,"column":0,"depth":4},"c-setup-docker-compose-worker":{"type":"header","text":"c. Setup Docker Compose Worker","value":"c-setup-docker-compose-worker","line":658,"column":0,"depth":4},"d-jalankan-worker":{"type":"header","text":"d. Jalankan Worker","value":"d-jalankan-worker","line":694,"column":0,"depth":4},"e-kapan-worker-ini-bakal-aktif":{"type":"header","text":"e. Kapan Worker Ini Bakal \"Aktif\"?","value":"e-kapan-worker-ini-bakal-aktif","line":712,"column":0,"depth":4},"f-tips-tambahan":{"type":"header","text":"f. Tips Tambahan","value":"f-tips-tambahan","line":723,"column":0,"depth":4},"8-troubleshooting--tips":{"type":"header","text":"8. Troubleshooting & Tips","value":"8-troubleshooting--tips","line":729,"column":0,"depth":3},"a-container-restart-terus":{"type":"header","text":"a. Container Restart Terus","value":"a-container-restart-terus","line":735,"column":0,"depth":4},"b-port-conflict":{"type":"header","text":"b. Port Conflict","value":"b-port-conflict","line":764,"column":0,"depth":4},"c-worker-gak-jalan--diam-aja":{"type":"header","text":"c. Worker Gak Jalan / Diam Aja","value":"c-worker-gak-jalan--diam-aja","line":784,"column":0,"depth":4},"d-cara-baca-log-container":{"type":"header","text":"d. Cara Baca Log Container","value":"d-cara-baca-log-container","line":798,"column":0,"depth":4},"e-tools-bantu-portainer--docker-dashboard":{"type":"header","text":"e. Tools Bantu: Portainer & Docker Dashboard","value":"e-tools-bantu-portainer--docker-dashboard","line":815,"column":0,"depth":4},"f-tips-tambahan-1":{"type":"header","text":"f. Tips Tambahan","value":"f-tips-tambahan-1","line":839,"column":0,"depth":4},"9-next-step-worker-dan-beyond":{"type":"header","text":"9. Next Step: Worker dan Beyond","value":"9-next-step-worker-dan-beyond","line":845,"column":0,"depth":3},"a-kapan-perlu-setup-worker":{"type":"header","text":"a. Kapan Perlu Setup Worker?","value":"a-kapan-perlu-setup-worker","line":851,"column":0,"depth":4},"b-redis-jadi-penghubung-web--worker":{"type":"header","text":"b. Redis Jadi “Penghubung” Web & Worker","value":"b-redis-jadi-penghubung-web--worker","line":866,"column":0,"depth":4},"c-opsi-lanjutan-ssl--load-balancer":{"type":"header","text":"c. Opsi Lanjutan: SSL & Load Balancer","value":"c-opsi-lanjutan-ssl--load-balancer","line":877,"column":0,"depth":4},"d-opsi-auth-tambahan":{"type":"header","text":"d. Opsi Auth Tambahan","value":"d-opsi-auth-tambahan","line":886,"column":0,"depth":4},"e-upgrade--update-flowise":{"type":"header","text":"e. Upgrade & Update Flowise","value":"e-upgrade--update-flowise","line":896,"column":0,"depth":4},"f-integrasi-lain":{"type":"header","text":"f. Integrasi Lain","value":"f-integrasi-lain","line":909,"column":0,"depth":4}},"children":[],"parent":"usgxd5yie5i0lp6yslc92dy","data":{}},"body":"<h1 id=\"setup-vm-azure\">Setup Vm Azure<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#setup-vm-azure\"></a></h1>\n<h2 id=\"1-pendahuluan\">1. Pendahuluan<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1-pendahuluan\"></a></h2>\n<p>Lo mungkin udah sering denger soal <strong>Flowise</strong>—platform open-source yang simpel buat bikin chatflow AI dan integrasi ke berbagai sumber data. Kenapa Flowise? Karena dia bener-bener plug and play: lu tinggal deploy, bikin workflow, dan langsung bisa ngobrol pake LLM kayak ChatGPT. Ga usah repot setup backend ribet—langsung gas.</p>\n<p>Di tutorial kali ini, kita bakal setup Flowise dari awal sampe jalan di server, pake VM. Tapi apa sih <strong>VM</strong> itu?\nSingkatnya, VM (Virtual Machine) adalah server virtual yang lu bisa sewa dan kontrol sendiri. Ibaratnya kayak PC lo, tapi jalan di cloud. Lu bisa pilih: mau di Azure, AWS, GCP—semua sama prinsipnya. Kali ini, gue contohin di <strong>Azure VM</strong>, tapi langkahnya bakal sama aja kalau lu mau pake yang lain.</p>\n<p>Kenapa pake VM?</p>\n<ul>\n<li>Karena <strong>Flowise</strong> itu butuh environment yang stabil dan bisa diakses internet.</li>\n<li>Ga ribet: lu punya full akses buat ngatur environment, install apa aja, aman.</li>\n<li>Bisa di-scale: nanti butuh worker, tinggal jalanin worker. Mau load balancer? Tinggal setup.</li>\n</ul>\n<p>Jadi, di sini kita bakal <strong>bikin VM di Azure, setup environment (Docker, Compose), deploy Flowise sampe kelar</strong>.\nNextnya, lu bisa lanjut ke worker (buat load queue), bikin backup otomatis, sampe customin environment. Tapi yang penting: Flowise harus hidup dulu.</p>\n<p>Oke, Section 2 gue lanjut!</p>\n<hr>\n<h2 id=\"2-persiapan-vm\">2. Persiapan VM<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#2-persiapan-vm\"></a></h2>\n<p>Sebelum Flowise bisa jalan, kita butuh environment-nya dulu: <strong>VM</strong> (Virtual Machine) yang siap jadi rumah Flowise. Gue bakal bahas mulai dari bikin VM sampe nyiapin environment dasarnya.</p>\n<p>Oke, mari kita revisi dan bikin lebih detail, biar bener-bener komprehensif. Ini <strong>Section 2.1 Buat VM di Azure</strong> yang lebih mendalam!</p>\n<hr>\n<h3 id=\"21-buat-vm-di-azure-langkah-lengkap\">2.1 Buat VM di Azure (Langkah Lengkap)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#21-buat-vm-di-azure-langkah-lengkap\"></a></h3>\n<p><strong>Kenapa VM?</strong>\nKarena Flowise bakal jalan stabil di environment yang dedicated. Azure VM ini semacam “rumah” yang lu kelola sendiri — lu bisa atur CPU, RAM, disk space, dan keamanan sesuai kebutuhan.</p>\n<p><strong>Langkah-langkah lengkapnya:</strong></p>\n<h4 id=\"a-akses-portal-azure\">a. Akses Portal Azure<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#a-akses-portal-azure\"></a></h4>\n<ol>\n<li>Buka browser dan login ke <a href=\"https://portal.azure.com/\">Azure Portal</a>.</li>\n<li>Di sidebar kiri, klik <strong>Virtual Machines</strong>.</li>\n</ol>\n<h4 id=\"b-mulai-buat-vm\">b. Mulai Buat VM<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#b-mulai-buat-vm\"></a></h4>\n<ol>\n<li>Klik <strong>+ Create</strong> > <strong>Azure Virtual Machine</strong>.</li>\n<li>Lu bakal lihat form “Create a virtual machine”.</li>\n</ol>\n<h4 id=\"c-basic-details\">c. Basic Details<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-basic-details\"></a></h4>\n<ul>\n<li><strong>Subscription</strong>: biasanya udah default ke subscription lu.</li>\n<li><strong>Resource Group</strong>: pilih yang udah ada, atau klik <strong>Create new</strong> buat bikin resource group baru (misalnya <code>rg-flowise</code>).</li>\n<li><strong>Virtual machine name</strong>: nama VM lu, misalnya <code>test-vm-1</code>.</li>\n<li><strong>Region</strong>: pilih region yang dekat sama user. Kalau buat testing, <code>Southeast Asia</code> atau <code>East Asia</code> biasanya bagus.</li>\n<li><strong>Availability options</strong>: default <code>No infrastructure redundancy required</code> (oke buat testing).</li>\n<li><strong>Image</strong>: pilih <strong>Ubuntu 22.04 LTS</strong> (versi stabil dan familiar).</li>\n<li><strong>Size</strong>: klik <strong>See all sizes</strong> dan pilih yang pas. Buat testing, <code>B1s</code> udah cukup (1 vCPU, 1 GB RAM).</li>\n<li><strong>Authentication type</strong>:\n<ul>\n<li>Pilih <strong>SSH public key</strong> biar lebih aman.</li>\n<li><strong>Username</strong>: misalnya <code>azureuser</code>.</li>\n<li><strong>SSH public key source</strong>: biasanya lu udah punya key di <code>~/.ssh/id_rsa.pub</code>. Copy paste ke kolom ini.</li>\n</ul>\n</li>\n<li><strong>Inbound port rules</strong>:\n<ul>\n<li><strong>Public inbound ports</strong>: <code>Allow selected ports</code>.</li>\n<li><strong>Select inbound ports</strong>: pilih <code>SSH (22)</code>.</li>\n<li>Nanti kita atur port lain (3000 buat Flowise, 6379 buat Redis).`</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"d-disk-dan-storage\">d. Disk dan Storage<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#d-disk-dan-storage\"></a></h4>\n<ul>\n<li><strong>OS disk type</strong>: defaultnya <strong>Standard SSD</strong> (cukup untuk testing).</li>\n<li>Kalau butuh data disk tambahan, nanti bisa attach disk lain.</li>\n</ul>\n<h4 id=\"e-networking\">e. Networking<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#e-networking\"></a></h4>\n<ul>\n<li>Azure otomatis bikin Virtual Network dan Subnet.</li>\n<li><strong>Public IP</strong>: biar lu bisa SSH, pastikan aktif.</li>\n<li><strong>NIC network security group</strong>: defaultnya bikin <strong>Basic</strong> rule SSH (22). Nanti lu bisa atur rule buat 3000 &#x26; 6379 manual kalau perlu.</li>\n</ul>\n<h4 id=\"f-management-monitoring-dan-lainnya\">f. Management, Monitoring, dan lainnya<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#f-management-monitoring-dan-lainnya\"></a></h4>\n<ul>\n<li>\n<p>Buat testing, lu bisa biarin default.</p>\n</li>\n<li>\n<p>Kalau buat production, pastikan:</p>\n<ul>\n<li><strong>Boot diagnostics</strong>: aktif.</li>\n<li><strong>Auto-shutdown</strong>: aktifin biar hemat biaya kalo lupa shutdown.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"g-review--create\">g. Review &#x26; Create<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#g-review--create\"></a></h4>\n<ul>\n<li>Klik <strong>Review + create</strong>.</li>\n<li>Azure bakal validasi. Kalau ga ada error, klik <strong>Create</strong>.</li>\n</ul>\n<p>Tunggu 1–2 menit sampe VM ready.</p>\n<hr>\n<h4 id=\"h-ssh-ke-vm\">h. SSH ke VM<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#h-ssh-ke-vm\"></a></h4>\n<ul>\n<li>Setelah VM aktif, liat <strong>Public IP address</strong> di dashboard VM.</li>\n<li>Di terminal lokal lu:</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> azureuser@<span class=\"token operator\">&#x3C;</span>public-ip<span class=\"token operator\">></span>\n</code></pre>\n<p>Ganti <code>&#x3C;public-ip></code> dengan IP VM lu. Kalau pake password, dia bakal minta password. Kalau pake SSH key, langsung connect.</p>\n<h4 id=\"i-atur-firewall-buat-port-flowise--redis\">i. Atur Firewall Buat Port Flowise &#x26; Redis<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#i-atur-firewall-buat-port-flowise--redis\"></a></h4>\n<p>By default, cuma port 22 yang kebuka. Flowise jalan di port 3000 dan Redis di 6379. Jadi:</p>\n<ol>\n<li>\n<p>Balik ke Azure Portal.</p>\n</li>\n<li>\n<p>Masuk ke VM > <strong>Networking</strong>.</p>\n</li>\n<li>\n<p>Klik <strong>Add inbound port rule</strong>:</p>\n<ul>\n<li><strong>Source</strong>: Any</li>\n<li><strong>Source port ranges</strong>: *</li>\n<li><strong>Destination</strong>: Any</li>\n<li><strong>Destination port ranges</strong>: 3000</li>\n<li><strong>Protocol</strong>: TCP</li>\n<li><strong>Action</strong>: Allow</li>\n<li><strong>Priority</strong>: 300 (biar ga bentrok sama rule lain).</li>\n<li><strong>Name</strong>: allow-3000</li>\n</ul>\n</li>\n<li>\n<p>Ulangi buat port 6379 (Redis).</p>\n</li>\n</ol>\n<hr>\n<h4 id=\"j-sekarang-vm-lu-siap\">j. Sekarang VM lu siap<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#j-sekarang-vm-lu-siap\"></a></h4>\n<ul>\n<li>OS Ubuntu 22.04 LTS</li>\n<li>Port 22 (SSH), 3000 (Flowise), 6379 (Redis) udah kebuka</li>\n<li>SSH udah bisa dipake</li>\n</ul>\n<p>Udah. Tinggal setup environment dasar (update OS, pasang Docker, dll.) di section selanjutnya.</p>\n<h3 id=\"22-akses-vm\">2.2 Akses VM<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#22-akses-vm\"></a></h3>\n<p>Setelah VM jadi, lu dapet public IP. Buka terminal lokal lu:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> azureuser@<span class=\"token operator\">&#x3C;</span>public-ip<span class=\"token operator\">></span>\n</code></pre>\n<p>Ganti <code>&#x3C;public-ip></code> pake IP VM yang lu buat.</p>\n<p>Kalau pake password, dia minta password. Kalau SSH key, tinggal masuk aja.</p>\n<p>Udah connect? Mantap. Kita lanjut ke setup dasar.</p>\n<h3 id=\"23-update--install-basic-tools\">2.3 Update &#x26; Install Basic Tools<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#23-update--install-basic-tools\"></a></h3>\n<p>Karena ini VM fresh, kita update dulu biar paketnya aman dan terbaru:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade -y\n</code></pre>\n<p>Install tools basic yang sering kepake:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> -y <span class=\"token function\">git</span> <span class=\"token function\">curl</span> <span class=\"token function\">wget</span> <span class=\"token function\">htop</span>\n</code></pre>\n<p>Nanti lu bisa pake <code>htop</code> buat monitor load VM.</p>\n<h3 id=\"24-pasang-docker--docker-compose\">2.4 Pasang Docker &#x26; Docker Compose<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#24-pasang-docker--docker-compose\"></a></h3>\n<p>Flowise butuh Docker biar ga ribet dependensi.</p>\n<ol>\n<li>Install Docker:</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -fsSL https://get.docker.com -o get-docker.sh\n<span class=\"token function\">sudo</span> <span class=\"token function\">sh</span> get-docker.sh\n</code></pre>\n<ol start=\"2\">\n<li>Cek Docker udah jalan:</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl status <span class=\"token function\">docker</span>\n</code></pre>\n<ol start=\"3\">\n<li>Install Docker Compose (biar gampang manage multi-container):</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> -y <span class=\"token function\">docker-compose</span>\n</code></pre>\n<ol start=\"4\">\n<li>Biar ga pake <code>sudo</code> terus, tambahin user ke grup Docker:</li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG <span class=\"token function\">docker</span> <span class=\"token environment constant\">$USER</span>\n</code></pre>\n<p>Keluar SSH (<code>exit</code>) dan masuk lagi biar group Docker langsung aktif.</p>\n<hr>\n<p>Di sini, VM lu udah siap buat deploy Flowise. Docker dan Compose udah jalan. Next, kita bakal setup Flowise bareng config dasar (pake file <code>.env</code>, <code>docker-compose.yml</code>, dll).</p>\n<p>Oke, lanjut ke <strong>Section 3: Deploy Flowise</strong>?</p>\n<p>Oke, kita lanjut ke <strong>Section 3: Setup Environment Dasar di VM</strong>. Ini bagian penting biar VM lu siap buat deploy Flowise dan Redis.</p>\n<hr>\n<h3 id=\"3-setup-environment-dasar-di-vm\">3. Setup Environment Dasar di VM<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#3-setup-environment-dasar-di-vm\"></a></h3>\n<p>Begitu lu SSH ke VM, kita langsung rapihin environment-nya supaya stabil dan ga bikin pusing ke depannya.</p>\n<p><strong>a. Update OS</strong>\nPertama, update OS ke versi terbaru biar aman dan stabil:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> upgrade -y\n</code></pre>\n<p>Ini bakal ambil update security patch dan package terbaru. Tunggu sampe kelar.</p>\n<hr>\n<p><strong>b. Install Dependency Dasar</strong>\nFlowise butuh Docker &#x26; Docker Compose. Kita pasang dulu:</p>\n<ol>\n<li><strong>Install Docker:</strong></li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker.io -y\n</code></pre>\n<ol start=\"2\">\n<li><strong>Enable dan Start Docker:</strong></li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token function\">docker</span>\n<span class=\"token function\">sudo</span> systemctl start <span class=\"token function\">docker</span>\n</code></pre>\n<ol start=\"3\">\n<li><strong>Cek Docker:</strong></li>\n</ol>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> --version\n</code></pre>\n<p>Harusnya muncul versi Docker.</p>\n<hr>\n<p><strong>c. Install Docker Compose</strong>\nDocker Compose biasanya ga include di Ubuntu. Kita install manual:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">docker-compose</span> -y\n</code></pre>\n<p>Cek versi:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker-compose</span> --version\n</code></pre>\n<hr>\n<p><strong>d. Tambah User ke Group Docker (opsional)</strong>\nSupaya ga perlu <code>sudo</code> tiap kali jalanin Docker:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> -aG <span class=\"token function\">docker</span> <span class=\"token environment constant\">$USER</span>\n</code></pre>\n<p>Keluar dan login lagi biar groupnya kebaca:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">exit</span>\n</code></pre>\n<p>Terus SSH lagi ke VM.</p>\n<hr>\n<p><strong>e. Cek Firewall (Opsional)</strong>\nKadang firewall VM nutup port default:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw status\n</code></pre>\n<p>Kalau aktif dan lu mau atur rule:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">3000</span>/tcp\n<span class=\"token function\">sudo</span> ufw allow <span class=\"token number\">6379</span>/tcp\n<span class=\"token function\">sudo</span> ufw reload\n</code></pre>\n<hr>\n<p><strong>f. Tes Docker</strong>\nLu bisa coba jalanin container dummy buat tes:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run hello-world\n</code></pre>\n<p>Kalau muncul “Hello from Docker!”, environment Docker lu udah beres.</p>\n<hr>\n<p><strong>g. Siapin Direktori Project</strong>\nLu bisa buat satu folder buat simpen semua file:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> ~/myapp\n<span class=\"token builtin class-name\">cd</span> ~/myapp\n</code></pre>\n<hr>\n<h3 id=\"4-deploy-flowise--redis-pakai-docker-compose\">4. Deploy Flowise &#x26; Redis pakai Docker Compose<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#4-deploy-flowise--redis-pakai-docker-compose\"></a></h3>\n<p>Sekarang kita udah punya environment yang siap tempur. Waktunya deploy Flowise barengan Redis pake Docker Compose.</p>\n<hr>\n<p><strong>a. Buat File <code>.env</code></strong></p>\n<p>Simpan environment variable di satu file <code>.env</code>. Contoh paling basic:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">&#x3C;&#x3C;</span><span class=\"token string\">EOF<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> .env</span>\nPORT=3000\nDATABASE_PATH=/root/.flowise\nSECRETKEY_PATH=/root/.flowise\nLOG_PATH=/root/.flowise/logs\nBLOB_STORAGE_PATH=/root/.flowise/storage\nJWT_AUTH_TOKEN_SECRET=secret\nJWT_REFRESH_TOKEN_SECRET=secret\nJWT_ISSUER=flowise\nJWT_AUDIENCE=flowise\nEXPRESS_SESSION_SECRET=flowise\n\nREDIS_HOST=redis\nREDIS_PORT=6379\nMODE=queue\nQUEUE_NAME=flowise-queue\nQUEUE_REDIS_EVENT_STREAM_MAX_LEN=100000\nEOF</span>\n</code></pre>\n<hr>\n<p><strong>b. Buat File <code>docker-compose.yml</code></strong></p>\n<p>Ini file utama yang bakal jalanin Flowise &#x26; Redis:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.1'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> redis<span class=\"token punctuation\">:</span>alpine\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> docker_redis_1\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'6379:6379'</span>\n\n  <span class=\"token key atrule\">flowise-web</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> flowiseai/flowise\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> flowise<span class=\"token punctuation\">-</span>web\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> PORT=$<span class=\"token punctuation\">{</span>PORT<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> MODE=$<span class=\"token punctuation\">{</span>MODE<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> REDIS_HOST=$<span class=\"token punctuation\">{</span>REDIS_HOST<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> REDIS_PORT=$<span class=\"token punctuation\">{</span>REDIS_PORT<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> QUEUE_NAME=$<span class=\"token punctuation\">{</span>QUEUE_NAME<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> QUEUE_REDIS_EVENT_STREAM_MAX_LEN=$<span class=\"token punctuation\">{</span>QUEUE_REDIS_EVENT_STREAM_MAX_LEN<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> DATABASE_PATH=$<span class=\"token punctuation\">{</span>DATABASE_PATH<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> SECRETKEY_PATH=$<span class=\"token punctuation\">{</span>SECRETKEY_PATH<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> LOG_PATH=$<span class=\"token punctuation\">{</span>LOG_PATH<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> BLOB_STORAGE_PATH=$<span class=\"token punctuation\">{</span>BLOB_STORAGE_PATH<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> JWT_AUTH_TOKEN_SECRET=$<span class=\"token punctuation\">{</span>JWT_AUTH_TOKEN_SECRET<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> JWT_REFRESH_TOKEN_SECRET=$<span class=\"token punctuation\">{</span>JWT_REFRESH_TOKEN_SECRET<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> JWT_ISSUER=$<span class=\"token punctuation\">{</span>JWT_ISSUER<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> JWT_AUDIENCE=$<span class=\"token punctuation\">{</span>JWT_AUDIENCE<span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">-</span> EXPRESS_SESSION_SECRET=$<span class=\"token punctuation\">{</span>EXPRESS_SESSION_SECRET<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">'${PORT}:${PORT}'</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ~/.flowise<span class=\"token punctuation\">:</span>/root/.flowise\n</code></pre>\n<hr>\n<p><strong>c. Jalankan Docker Compose</strong></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker-compose</span> --env-file .env up -d\n</code></pre>\n<p>Docker Compose bakal:</p>\n<ul>\n<li>Download image Redis &#x26; Flowise</li>\n<li>Jalanin container</li>\n<li>Otomatis restart kalo VM reboot</li>\n</ul>\n<hr>\n<p><strong>d. Cek Status</strong></p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> <span class=\"token function\">ps</span>\n</code></pre>\n<p>Harusnya muncul dua container:</p>\n<ul>\n<li><code>docker_redis_1</code></li>\n<li><code>flowise-web</code></li>\n</ul>\n<hr>\n<p><strong>e. Akses Flowise</strong></p>\n<p>Buka browser, ketik:</p>\n<pre><code>http://&#x3C;IP_VM>:3000\n</code></pre>\n<p>Harusnya udah muncul Flowise Dashboard.</p>\n<hr>\n<p><strong>f. Troubleshoot Kecil</strong></p>\n<ul>\n<li>\n<p>Kalo container crash:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> logs flowise-web\n</code></pre>\n</li>\n<li>\n<p>Kalo Redis error:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> logs docker_redis_1\n</code></pre>\n</li>\n</ul>\n<hr>\n<p><strong>g. Next: Setup Worker</strong>\nFlowise ini udah jalan, tapi dia masih single instance. Worker Redis belum di-setup. Nanti worker Redis ini yang bakal scale dan handle background job.</p>\n<h3 id=\"5-konfigurasi-environment\">5. Konfigurasi Environment<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#5-konfigurasi-environment\"></a></h3>\n<p>Oke, di tahap ini kita udah punya Flowise repo dan file-file pentingnya. Sekarang waktunya bikin file environment variable biar Flowise tau di mana dia harus nyimpen data dan konek ke Redis (kalau pakai).</p>\n<hr>\n<h4 id=\"a-kenapa-penting\">a. Kenapa Penting?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#a-kenapa-penting\"></a></h4>\n<p>File <code>.env</code> ini penting banget. Semua setting environment — port, database path, secret key, Redis, dll — disimpen di sini. Biar kalo lu mau deploy lagi di server lain, tinggal copy file <code>.env</code> doang. Praktis!</p>\n<hr>\n<h4 id=\"b-bikin-file-env-dasar\">b. Bikin File <code>.env</code> Dasar<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#b-bikin-file-env-dasar\"></a></h4>\n<p>Lu bisa bikin file <code>.env</code> langsung di VM:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> .env\n</code></pre>\n<p>Terus isiin basic config kayak gini:</p>\n<pre class=\"language-env\"><code class=\"language-env\">PORT=3000\n\n# Path default storage Flowise\nDATABASE_PATH=/root/.flowise\nSECRETKEY_PATH=/root/.flowise\nLOG_PATH=/root/.flowise/logs\nBLOB_STORAGE_PATH=/root/.flowise/storage\n\n# Basic JWT dan session secret\nJWT_AUTH_TOKEN_SECRET=secret\nJWT_REFRESH_TOKEN_SECRET=secret\nJWT_ISSUER=flowise\nJWT_AUDIENCE=flowise\nEXPRESS_SESSION_SECRET=flowise\n\n# Redis config\nREDIS_HOST=redis\nREDIS_PORT=6379\nMODE=queue\nQUEUE_NAME=flowise-queue\nQUEUE_REDIS_EVENT_STREAM_MAX_LEN=100000\n</code></pre>\n<p>Simpan file <code>.env</code> ini. Ini settingan yang udah cukup buat jalanin Flowise web plus Redis queue worker (opsional).</p>\n<hr>\n<h4 id=\"c-opsi-setting-bisa-dikosongin--custom\">c. Opsi Setting (Bisa Dikosongin / Custom)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-opsi-setting-bisa-dikosongin--custom\"></a></h4>\n<p>Kalau mau minimalis banget, lu bisa <strong>skip</strong> beberapa setting kayak SMTP, storage S3, atau Postgres. Flowise bisa jalanin semua data langsung di path <code>~/.flowise</code> default.</p>\n<p>Tapi kalo lu mau:</p>\n<ul>\n<li>Connect ke Postgres → Lu bisa tambah <code>DATABASE_TYPE</code>, <code>DATABASE_HOST</code>, <code>DATABASE_PORT</code>, dll.</li>\n<li>Pakai storage S3 / GCS → Lu bisa tambah <code>STORAGE_TYPE</code>, <code>S3_*</code>, <code>GOOGLE_*</code>.</li>\n<li>Aktifin monitoring (Prometheus, OpenTelemetry) → Tambah <code>METRICS_*</code> di <code>.env</code>.</li>\n</ul>\n<hr>\n<h4 id=\"d-cek-kembali\">d. Cek Kembali<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#d-cek-kembali\"></a></h4>\n<p>Sebelum lu <code>docker-compose up -d</code>, pastiin file <code>.env</code> lu udah:\n✅ Path storage\n✅ JWT secret\n✅ Redis config (kalau mau pakai queue)\n✅ Port (3000 default)</p>\n<hr>\n<h4 id=\"e-gunakan-env-di-docker-compose\">e. Gunakan <code>.env</code> di Docker Compose<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#e-gunakan-env-di-docker-compose\"></a></h4>\n<p>Pas lu jalanin Docker Compose, jangan lupa pake parameter <code>--env-file</code>:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker-compose</span> --env-file .env up -d\n</code></pre>\n<p>Dengan ini, Docker Compose bakal inject semua setting di <code>.env</code> ke environment container. Jadi config lu rapih dan gampang dikelola.</p>\n<hr>\n<h3 id=\"6-jalankan-flowise-web\">6. Jalankan Flowise Web<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#6-jalankan-flowise-web\"></a></h3>\n<p>Nah, sekarang lu udah punya semua yang lu butuhin — Docker Compose, file <code>.env</code>, dan repo Flowise yang udah di-clone. Waktunya ngejalanin Flowise biar bisa lu akses lewat browser!</p>\n<hr>\n<h4 id=\"a-jalankan-docker-compose\">a. Jalankan Docker Compose<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#a-jalankan-docker-compose\"></a></h4>\n<p>Cukup satu perintah ini, asalkan lu udah di direktori yang sama sama <code>docker-compose.yml</code>:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker-compose</span> --env-file .env up -d\n</code></pre>\n<p>Penjelasannya:</p>\n<ul>\n<li><code>--env-file .env</code> → buat baca file <code>.env</code> lu.</li>\n<li><code>-d</code> → biar container jalan di background, gak ganggu terminal.</li>\n</ul>\n<hr>\n<h4 id=\"b-cek-status\">b. Cek Status<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#b-cek-status\"></a></h4>\n<p>Cek container yang lagi jalan:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> <span class=\"token function\">ps</span>\n</code></pre>\n<p>Harusnya lu bakal liat:</p>\n<ul>\n<li><code>flowise-web</code> (container Flowise)</li>\n<li><code>docker_redis_1</code> (container Redis, kalau lu setup Redis juga)</li>\n</ul>\n<p>Kalau statusnya <strong>Up</strong>, artinya udah beres!</p>\n<hr>\n<h4 id=\"c-akses-flowise-di-browser\">c. Akses Flowise di Browser<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-akses-flowise-di-browser\"></a></h4>\n<p>Sekarang, lu tinggal buka browser dan masuk ke:</p>\n<pre><code>http://&#x3C;IP_VM>:3000\n</code></pre>\n<p>Contoh:</p>\n<pre><code>http://20.212.155.7:3000\n</code></pre>\n<p>Harusnya lu udah liat dashboard Flowise — itu artinya <strong>Flowise udah running!</strong></p>\n<hr>\n<h4 id=\"d-apa-yang-dilakuin-flowise\">d. Apa yang Dilakuin Flowise<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#d-apa-yang-dilakuin-flowise\"></a></h4>\n<p>Pas Flowise Web udah jalan, dia bakal:</p>\n<ul>\n<li>Buka port 3000 buat antarmuka (dashboard web).</li>\n<li>Simpen semua data (flow, setting, secret) di folder <code>~/.flowise</code> (volume mapping).</li>\n<li>Kalau Redis aktif dan lu udah set <code>MODE=queue</code>, dia juga siap ngoper ke worker (nanti lu setup).</li>\n</ul>\n<hr>\n<h4 id=\"e-troubleshooting-singkat\">e. Troubleshooting Singkat<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#e-troubleshooting-singkat\"></a></h4>\n<p>Kalau lu gak bisa akses di browser:</p>\n<ul>\n<li>Cek firewall VM (port 3000 udah kebuka belum?).</li>\n<li>Cek status container pakai <code>sudo docker ps</code> (ada yang restart?).</li>\n<li>Liat log container Flowise:</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> logs flowise-web\n</code></pre>\n<p>Biasanya error log cukup jelas, kayak salah path atau conflict port.</p>\n<hr>\n<h3 id=\"7-opsional-setup-worker\">7. (Opsional) Setup Worker<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#7-opsional-setup-worker\"></a></h3>\n<p>Worker ini sebenernya <strong>bukan wajib</strong> — Flowise Web udah cukup kalau trafficnya santai. Tapi kalau lu mau:</p>\n<ul>\n<li><strong>Load lebih berat</strong> (banyak user / banyak flow jalan bareng).</li>\n<li><strong>Pakai mode queue</strong> biar lebih scalable.</li>\n<li><strong>Pisahin job processing</strong> biar web lebih ringan.</li>\n</ul>\n<p>Worker adalah jawabannya.</p>\n<hr>\n<h4 id=\"a-apa-itu-worker\">a. Apa itu Worker?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#a-apa-itu-worker\"></a></h4>\n<p>Secara singkat:</p>\n<ul>\n<li><strong>Flowise Web</strong>: frontend dan API.</li>\n<li><strong>Flowise Worker</strong>: backend yang kerjain job intensif (eksekusi alur RAG, LLM, dkk).</li>\n</ul>\n<p>Worker <strong>ngambil job</strong> dari Redis, yang jadi queue. Jadi Redis <strong>harus jalan dulu</strong>.</p>\n<hr>\n<h4 id=\"b-kapan-worker-ini-kepake\">b. Kapan Worker Ini Kepake?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#b-kapan-worker-ini-kepake\"></a></h4>\n<p>Worker jalan kalau di <code>.env</code> lu set:</p>\n<pre class=\"language-env\"><code class=\"language-env\">MODE=queue\n</code></pre>\n<p>Di Flowise Web, dia cuma ngirim job ke Redis. Worker yang bakal ambil job dan eksekusi.</p>\n<hr>\n<h4 id=\"c-setup-docker-compose-worker\">c. Setup Docker Compose Worker<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-setup-docker-compose-worker\"></a></h4>\n<p>Biasanya <strong>worker Compose file</strong> (<code>docker-compose.worker.yml</code>) beda sama <code>docker-compose.yml</code> web. Contoh file:</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3.1'</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">worker</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> flowiseai/flowise\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> MODE=queue\n      <span class=\"token punctuation\">-</span> QUEUE_NAME=flowise<span class=\"token punctuation\">-</span>queue\n      <span class=\"token punctuation\">-</span> REDIS_HOST=redis\n      <span class=\"token punctuation\">-</span> REDIS_PORT=6379\n      <span class=\"token punctuation\">-</span> WORKER_CONCURRENCY=100\n      <span class=\"token punctuation\">-</span> DATABASE_PATH=/root/.flowise\n      <span class=\"token punctuation\">-</span> SECRETKEY_PATH=/root/.flowise\n      <span class=\"token punctuation\">-</span> LOG_PATH=/root/.flowise/logs\n      <span class=\"token punctuation\">-</span> BLOB_STORAGE_PATH=/root/.flowise/storage\n    <span class=\"token key atrule\">entrypoint</span><span class=\"token punctuation\">:</span> /bin/sh <span class=\"token punctuation\">-</span>c \"sleep 3; flowise worker\"\n    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> redis\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> ~/.flowise<span class=\"token punctuation\">:</span>/root/.flowise\n\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> redis<span class=\"token punctuation\">:</span><span class=\"token number\">7</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n</code></pre>\n<p>Worker ini bakal <strong>nyambung ke Redis</strong> (port 6379) dan siap tarik job.</p>\n<hr>\n<h4 id=\"d-jalankan-worker\">d. Jalankan Worker<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#d-jalankan-worker\"></a></h4>\n<p>Kalau Redis udah jalan:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker-compose</span> --env-file .env -f docker-compose.worker.yml up -d\n</code></pre>\n<p>Cek worker status:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> <span class=\"token function\">ps</span>\n</code></pre>\n<p>Harusnya container <code>worker</code> statusnya <strong>Up</strong>.</p>\n<hr>\n<h4 id=\"e-kapan-worker-ini-bakal-aktif\">e. Kapan Worker Ini Bakal \"Aktif\"?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#e-kapan-worker-ini-bakal-aktif\"></a></h4>\n<p>Worker jalan terus, tapi dia <strong>baru \"sibuk\"</strong> kalau ada job masuk:</p>\n<ul>\n<li>Flowise Web lempar job (misal deploy Flow).</li>\n<li>Worker ambil job dari Redis dan eksekusi.</li>\n</ul>\n<p>Kalau job kosong, worker standby aja.</p>\n<hr>\n<h4 id=\"f-tips-tambahan\">f. Tips Tambahan<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#f-tips-tambahan\"></a></h4>\n<ul>\n<li>Pastikan <code>MODE=queue</code> di Web dan Worker sama.</li>\n<li>Kalau lu pake volume mapping <code>~/.flowise</code>, Worker share data yang sama sama Web.</li>\n<li>Redis <strong>harus stabil</strong> — worker butuh Redis buat ngambil job.</li>\n</ul>\n<h3 id=\"8-troubleshooting--tips\">8. Troubleshooting &#x26; Tips<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#8-troubleshooting--tips\"></a></h3>\n<p>Walaupun setup Flowise di VM lumayan gampang, pasti ada beberapa masalah yang sering muncul. Nah, di section ini, gue kasih tips troubleshooting dan juga beberapa tools yang bisa bantu lu mantau performa container.</p>\n<hr>\n<h4 id=\"a-container-restart-terus\">a. Container Restart Terus<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#a-container-restart-terus\"></a></h4>\n<p>Kalau lu lihat container <strong>restart terus</strong> di <code>docker ps</code> (statusnya “Restarting”), biasanya karena:</p>\n<ul>\n<li>File <code>.env</code> belum lengkap atau ada yang typo.</li>\n<li>Redis belum jalan (padahal Web/Worker butuh Redis).</li>\n<li>Volume <code>~/.flowise</code> belum ada permission (biasanya di VM fresh, butuh <code>sudo chown</code>).</li>\n<li>Port conflict: port <code>3000</code> (web) atau <code>6379</code> (Redis) udah kepake sama service lain.</li>\n</ul>\n<p><strong>Solusi:</strong></p>\n<ul>\n<li>\n<p>Cek log container:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> logs flowise-web\n</code></pre>\n</li>\n<li>\n<p>Pastikan file <code>.env</code> valid:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> .env\n</code></pre>\n</li>\n<li>\n<p>Tes Redis udah running:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> redis\n</code></pre>\n</li>\n</ul>\n<hr>\n<h4 id=\"b-port-conflict\">b. Port Conflict<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#b-port-conflict\"></a></h4>\n<p>Kalau muncul error <code>port already in use</code> pas <code>docker-compose up</code>, itu tandanya port 3000 atau 6379 udah dipake.</p>\n<p><strong>Solusi:</strong></p>\n<ul>\n<li>\n<p>Cari service yang pake port itu:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">lsof</span> -i :3000\n<span class=\"token function\">sudo</span> <span class=\"token function\">lsof</span> -i :6379\n</code></pre>\n</li>\n<li>\n<p>Kill service yang ganggu:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">kill</span> -9 <span class=\"token operator\">&#x3C;</span>pid<span class=\"token operator\">></span>\n</code></pre>\n</li>\n</ul>\n<hr>\n<h4 id=\"c-worker-gak-jalan--diam-aja\">c. Worker Gak Jalan / Diam Aja<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-worker-gak-jalan--diam-aja\"></a></h4>\n<p>Worker gak ngapa-ngapain?</p>\n<ul>\n<li>\n<p>Cek Redis:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> logs docker_redis_1\n</code></pre>\n</li>\n<li>\n<p>Pastikan <code>MODE=queue</code> di <code>.env</code> Web dan Worker <strong>sama</strong>.</p>\n</li>\n<li>\n<p>Worker cuma “bangun” kalau ada job. Jadi lu coba jalanin Flow biar dia ada kerjaan.</p>\n</li>\n</ul>\n<hr>\n<h4 id=\"d-cara-baca-log-container\">d. Cara Baca Log Container<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#d-cara-baca-log-container\"></a></h4>\n<p>Penting nih buat debugging:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> logs flowise-web\n<span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> logs worker\n</code></pre>\n<p>Kalau lognya terlalu panjang, bisa pakai <code>tail</code>:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> logs -f flowise-web\n</code></pre>\n<hr>\n<h4 id=\"e-tools-bantu-portainer--docker-dashboard\">e. Tools Bantu: Portainer &#x26; Docker Dashboard<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#e-tools-bantu-portainer--docker-dashboard\"></a></h4>\n<p>Kalau lu mau <strong>liat container secara visual</strong>, cobain tools kayak:</p>\n<ul>\n<li><strong>Portainer</strong>: UI buat manage container, liat logs, restart, dll.</li>\n<li><strong>Docker Dashboard</strong> (kalau lu pake Docker Desktop).</li>\n</ul>\n<p>Install Portainer:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> volume create portainer_data\n<span class=\"token function\">docker</span> run -d -p <span class=\"token number\">9000</span>:9000 -p <span class=\"token number\">8000</span>:8000 --name portainer <span class=\"token punctuation\">\\</span>\n    --restart<span class=\"token operator\">=</span>always -v /var/run/docker.sock:/var/run/docker.sock <span class=\"token punctuation\">\\</span>\n    -v portainer_data:/data portainer/portainer-ce\n</code></pre>\n<p>Akses di browser:</p>\n<pre><code>http://&#x3C;VM_IP>:9000\n</code></pre>\n<hr>\n<h4 id=\"f-tips-tambahan-1\">f. Tips Tambahan<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#f-tips-tambahan-1\"></a></h4>\n<ul>\n<li><strong>Backup data <code>.flowise</code></strong>: semua logs, DB, dan storage Flowise ada di folder ini.</li>\n<li><strong>Auto restart</strong>: Compose udah <code>restart: always</code>, jadi kalau VM reboot, container auto naik lagi.</li>\n<li><strong>Scaling</strong>: kalau Flowise makin rame, lu bisa deploy Worker di VM lain (asal Redisnya bareng).</li>\n</ul>\n<h3 id=\"9-next-step-worker-dan-beyond\">9. Next Step: Worker dan Beyond<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#9-next-step-worker-dan-beyond\"></a></h3>\n<p>Kalau lu udah deploy Flowise Web, biasanya yang kepikiran selanjutnya adalah:</p>\n<hr>\n<h4 id=\"a-kapan-perlu-setup-worker\">a. Kapan Perlu Setup Worker?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#a-kapan-perlu-setup-worker\"></a></h4>\n<p>Flowise Worker itu kayak “otak tambahan” buat ngerjain job berat (kayak scraping, generate response panjang, dll.). Worker <strong>jalanin job</strong> yang dikasih Flowise Web.</p>\n<ul>\n<li><strong>Kalau Flowise Web doang</strong>: semua job jalan di Web, bisa overload.</li>\n<li><strong>Kalau pake Worker</strong>: job dijalanin Worker, Web lebih ringan.</li>\n</ul>\n<p>Worker <strong>wajib</strong> kalau lu:</p>\n<ul>\n<li>Mau performa lebih stabil</li>\n<li>Ada job yang panjang</li>\n<li>Niat integrasi Flowise di production</li>\n</ul>\n<hr>\n<h4 id=\"b-redis-jadi-penghubung-web--worker\">b. Redis Jadi “Penghubung” Web &#x26; Worker<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#b-redis-jadi-penghubung-web--worker\"></a></h4>\n<p>Redis itu <strong>queue broker</strong> di Flowise:</p>\n<ul>\n<li>Flowise Web naro job ke Redis</li>\n<li>Worker ambil job dari Redis</li>\n</ul>\n<p>Makanya Redis wajib kalau pake Worker. Redis bisa lu deploy bareng (satu Compose) atau <strong>cluster</strong> (kalau mau scalable).</p>\n<hr>\n<h4 id=\"c-opsi-lanjutan-ssl--load-balancer\">c. Opsi Lanjutan: SSL &#x26; Load Balancer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#c-opsi-lanjutan-ssl--load-balancer\"></a></h4>\n<p>Kalau lu udah deploy Web &#x26; Worker, next step biasanya:</p>\n<ul>\n<li><strong>Pasang SSL</strong> (HTTPS) pake Nginx Proxy Manager atau Caddy.</li>\n<li><strong>Load balancer</strong>: kalo lu deploy banyak Worker, lu load balance biar stabil.</li>\n</ul>\n<hr>\n<h4 id=\"d-opsi-auth-tambahan\">d. Opsi Auth Tambahan<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#d-opsi-auth-tambahan\"></a></h4>\n<p>Flowise udah support <strong>Basic Auth</strong> di level dashboard.\nTapi kalo mau lebih secure, bisa:</p>\n<ul>\n<li>Reverse Proxy (Nginx Proxy Manager) + Basic Auth.</li>\n<li>OAuth2 / SSO pake Nginx atau external proxy.</li>\n</ul>\n<hr>\n<h4 id=\"e-upgrade--update-flowise\">e. Upgrade &#x26; Update Flowise<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#e-upgrade--update-flowise\"></a></h4>\n<p>Flowise lumayan aktif update, jadi lu juga perlu jaga:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull flowiseai/flowise\n<span class=\"token function\">docker-compose</span> down <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token function\">docker-compose</span> up -d\n</code></pre>\n<p>Jangan lupa backup dulu <code>.flowise</code> biar data aman.</p>\n<hr>\n<h4 id=\"f-integrasi-lain\">f. Integrasi Lain<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#f-integrasi-lain\"></a></h4>\n<p>Flowise itu enak karena bisa:</p>\n<ul>\n<li>Dipake bareng chatbot di WhatsApp, Discord, Slack, dll.</li>\n<li>Ditaro di workflow automation (kayak n8n, Zapier).</li>\n<li>Pake OpenAI atau LLM lain (Claude, Qwen, Ollama).</li>\n</ul>","noteIndex":{"id":"oqxmejlafk9x8rj9t5hya5z","title":"Hello and Welcome! 👋","desc":"","updated":1742030256619,"created":1646842475821,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"f7db9d96297496e598d70248ef16b81f","links":[],"anchors":{"find-more":{"type":"header","text":"Find More","value":"find-more","line":20,"column":0,"depth":2}},"children":["spfwom01chbihki1twghclf","bsv930j2j6qlih60c7eu7wh","ohf85tu5nw2b8ewx6cetsmp","u3lhhpriar8wgcjw8svapha","tvdcga33h6hi7fxd9cwqd66"],"parent":null,"data":{},"body":"\nWelcome to the homepage! I use Dendron to store and organize notes, ideas, and experiments I’m working on. Here are the main sections you’ll find on this site:\n\n1. **Learning Notes** — Practical notes on programming, recent technologies, and productivity tips.\n2. **Personal Projects** — Summaries of projects, experiments, and outcomes I’m working on or have completed.\n3. **Writings & Opinions** — Casual articles and reflections about technology, daily life, and other interesting topics.\n\nI’m constantly experimenting and learning. I hope the content here helps you as a reference, a starting point for discussion, or just light reading.\n\n> Why Dendron?\n>\nDendron helps keep notes organized. Its \"seed\" and \"vault\" concepts make it easy to structure content and find what you need.\n\n## Find More\n\nIf you want to learn more or connect, check these links:\n\n- [Homepage (Dendron)](https://zeihanaulia.github.io/sotoy/)\n- [My GitHub](https://github.com/zeihanaulia)\n- [My Twitter / X](https://x.com/zeihanaulia)\n\nThanks for stopping by. If you have feedback or want to chat, feel free to reach out.\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"seeds":{"dendron.templates":{}},"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":true,"siteRootDir":"docs","seo":{"title":"Sotoy","description":"Personal knowledge space about anything I learn. Notes, knowledge, and ideas from me.","author":"Zeihan Aulia","twitter":"zeihanaulia","image":{"url":"https://pbs.twimg.com/profile_images/502375255256485888/1UYtt7PT_400x400.jpeg","alt":"Software Engineer, "}},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/sotoy","siteUrl":"https://zeihanaulia.github.io","duplicateNoteBehavior":{"action":"useVault","payload":["vault-private","vault","dendron.templates"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}